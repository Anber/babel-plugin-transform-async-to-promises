function(count){try{const sequence=function(until){return new _AsyncGenerator(function(_generator){let i=0;const _temp2=_for(function(){return i<until;},function(){return i++;},function(){return _generator._yield(i).then(function(){});});if(_temp2&&_temp2.then)return _temp2.then(function(){});});};let result=0;const _temp=_forAwaitOf(sequence(count),function(value){result+=value;});return Promise.resolve(_temp&&_temp.then?_temp.then(function(){return result;}):result);}catch(e){return Promise.reject(e);}}